version: 2.1

executors:
  image-base:
    docker:
      - image: cimg/base:2022.05

jobs:
  test:
    docker:
      - image: cimg/go:1.18.2
    steps:
      - checkout
      # Finds dependencies not cached during past jobs.
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      # Downloads only dependencies that were not saved in the cache.
      - run:
          name: Install Dependencies
          command: go mod download
      # Saves current dependencies in cache.
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/md"
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test-reports
            gotestsum --junitfile /tmp/test-reports/unit-tests.xml
      # NOTE: Generate coverage and expose to web.
      - store_test_results:
          path: /tmp/test-reports

  build:
    executor: image-base
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build image
          command: |
            docker build --target development -t "${CI_REGISTRY}/${CI_PROJECT_PATH}:latest" .
      - run:
          name: Archive image
          command: docker save -o image.tar "${CI_REGISTRY}/${CI_PROJECT_PATH}" 
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  publish:
    executor: image-base
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Load archived image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish image
          command: |
            echo "${CI_BUILD_TOKEN}" | docker login -u averagebit --password-stdin
            CI_VERSION_TAG="0.0.${CIRCLE_BUILD_NUM}"
            docker tag "${CI_REGISTRY}/${CI_PROJECT_PATH}:latest" "${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_VERSION_TAG}"
            docker push "${CI_REGISTRY}/${CI_PROJECT_PATH}:latest"
            docker push "${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_VERSION_TAG}"

  deploy:
    executor: image-base
    steps:
      - run:
          name: Deploy
          command: |
            CI_VERSION_TAG="0.0.$((${CIRCLE_BUILD_NUM} - 1))"
            IMAGE_NAME="${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_VERSION_TAG}"
            CONTAINER_NAME="circle"
            ssh -o StrictHostKeyChecking=no "${SSH_USER}@${SSH_HOST}" "sudo docker rm -f '${CONTAINER_NAME}' || true && sudo docker run -d --restart always -p 127.0.0.1:2000:8080/tcp --name '${CONTAINER_NAME}' '${IMAGE_NAME}'"

workflows:
  ci:
    jobs:
      - test:
          filters:
            branches:
              only: development
      - build:
          filters:
            branches:
              only: development
      - publish:
          requires:
            - build
          filters:
            branches:
              only: development  
      - deploy:
          requires:
            - publish
          filters:
            branches:
              only: development
